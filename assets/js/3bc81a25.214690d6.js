(self.webpackChunkreact_native_sensitive_info=self.webpackChunkreact_native_sensitive_info||[]).push([[9905],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),f=i,m=u["".concat(c,".").concat(f)]||u[f]||l[f]||o;return t?r.createElement(m,a(a({ref:n},d),{},{components:t})):r.createElement(m,a({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3306:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var r=t(4034),i=t(9973),o=(t(7294),t(3905)),a=["components"],s={id:"protectingWithFingerprint",title:"Fingerprint Protection",sidebar_label:"Fingerprint Protection"},c=void 0,p={unversionedId:"protectingWithFingerprint",id:"protectingWithFingerprint",isDocsHomePage:!1,title:"Fingerprint Protection",description:"You can easily protect stored data and unlocking it using fingerprint on Android, TouchID or FaceID on iOS. Before you proceed is important to check if user's device has any kind of sensors available.",source:"@site/docs/protectingWithFingerprint.md",sourceDirName:".",slug:"/protectingWithFingerprint",permalink:"/react-native-sensitive-info/docs/next/protectingWithFingerprint",editUrl:"https://github.com/mCodex/react-native-sensitive-info/tree/website/docs/protectingWithFingerprint.md",version:"current",lastUpdatedBy:"Mateus Andrade",lastUpdatedAt:1596129524,formattedLastUpdatedAt:"7/30/2020",frontMatter:{id:"protectingWithFingerprint",title:"Fingerprint Protection",sidebar_label:"Fingerprint Protection"},sidebar:"someSidebar",previous:{title:"Windows",permalink:"/react-native-sensitive-info/docs/next/windows_options"},next:{title:"Community Libraries",permalink:"/react-native-sensitive-info/docs/next/community_libraries"}},d=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Android",id:"android",children:[]},{value:"iOS",id:"ios",children:[]}]},{value:"Saving",id:"saving",children:[]},{value:"Getting",id:"getting",children:[]}],l={toc:d};function u(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can easily protect stored data and unlocking it using fingerprint on Android, TouchID or FaceID on iOS. Before you proceed is important to check if user's device has any kind of sensors available."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("h3",{id:"android"},"Android"),(0,o.kt)("p",null,"You need to add these permissions into your Android's manifest file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<uses-permission android:name="android.permission.USE_BIOMETRIC" />\n<uses-permission android:name="android.permission.USE_FINGERPRINT" />\n')),(0,o.kt)("h3",{id:"ios"},"iOS"),(0,o.kt)("p",null,"You need to add this permission into ",(0,o.kt)("inlineCode",{parentName:"p"},"Info.plist"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<key>NSFaceIDUsageDescription</key>\n<string>ADD_WHY_YOU_NEED_FACEID_PERMISSION</string>\n")),(0,o.kt)("h2",{id:"saving"},"Saving"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import SInfo from 'react-native-sensitive-info';\n\n// To check if any sensor is available on iOS/Android\nconst hasAnySensors = await SInfo.isSensorAvailable();\n\n// on Android you can check if has any fingersprints enrolled\nconst hasAnyFingerprintsEnrolled = await SInfo.hasEnrolledFingerprints();\n")),(0,o.kt)("p",null,"After checking those infos, you need to pass a few options into setItem's method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import SInfo from 'react-native-sensitive-info';\n\nconst savingFirstData = await SInfo.setItem('key1', 'value1', {\n    sharedPreferencesName: 'mySharedPrefs',\n    keychainService: 'myKeychain',\n    touchId: true, //add this key\n    kSecAccessControl: 'kSecAccessControlBiometryAny' // optional - Add support for FaceID\n});\n")),(0,o.kt)("p",null,"Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"touchId: true")," will store and protect your data by requiring to unlock using fingerprint or FaceID"),(0,o.kt)("h2",{id:"getting"},"Getting"),(0,o.kt)("p",null,"To get protected data from user's device you just do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import SInfo from 'react-native-sensitive-info';\n\nconst protectedData = await SInfo.getItem('key1', {\n    touchID: true,\n    showModal: true, //required (Android) - Will prompt user's fingerprint on Android\n    strings: { // optional (Android) - You can personalize your prompt\n        description: 'Custom Title ',\n        header: 'Custom Description',\n    },\n    kSecUseOperationPrompt: // required (iOS) -  A fallback string for iOS\n        'We need your permission to retrieve encrypted data',\n});\n")))}u.isMDXComponent=!0}}]);