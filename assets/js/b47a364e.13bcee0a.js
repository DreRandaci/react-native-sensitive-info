(self.webpackChunkreact_native_sensitive_info=self.webpackChunkreact_native_sensitive_info||[]).push([[7316],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||l[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1392:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(4034),a=n(9973),o=(n(7294),n(3905)),i=["components"],s={id:"setItem",title:"setItem",sidebar_label:"setItem"},c=void 0,p={unversionedId:"setItem",id:"version-6.x/setItem",isDocsHomePage:!1,title:"setItem",description:"Insert new data into the storage.",source:"@site/versioned_docs/version-6.x/setItem.md",sourceDirName:".",slug:"/setItem",permalink:"/react-native-sensitive-info/docs/setItem",editUrl:"https://github.com/mCodex/react-native-sensitive-info/tree/website/versioned_docs/version-6.x/setItem.md",version:"6.x",lastUpdatedBy:"Mateus Andrade",lastUpdatedAt:1604346208,formattedLastUpdatedAt:"11/2/2020",frontMatter:{id:"setItem",title:"setItem",sidebar_label:"setItem"},sidebar:"version-6.x/someSidebar",previous:{title:"isSensorAvailable",permalink:"/react-native-sensitive-info/docs/isSensorAvailable"},next:{title:"Android",permalink:"/react-native-sensitive-info/docs/android_options"}},u=[{value:"Note",id:"note",children:[]}],l={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Insert new data into the storage."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"setItem(key, value, options) : Promise<null>\n")),(0,o.kt)("p",null,"Check out the options that you can use for ",(0,o.kt)("a",{parentName:"p",href:"android_options"},"Android"),", ",(0,o.kt)("a",{parentName:"p",href:"ios_options"},"iOS")," and ",(0,o.kt)("a",{parentName:"p",href:"windows_options"},"Windows"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import SInfo from 'react-native-sensitive-info';\n\nconst myFunc = async () => {\n    return SInfo.setItem('key1', 'value1', {\n        sharedPreferencesName: 'mySharedPrefs',\n        keychainService: 'myKeychain'\n    });\n}\n\nawait myFunc();\n\n// The data is saved\n")),(0,o.kt)("h3",{id:"note"},"Note"),(0,o.kt)("p",null,"You can choose which keychain's service (iOS) and shared preferences's name (android) you want to use."),(0,o.kt)("p",null,"But if you rather not to use it our ",(0,o.kt)("strong",{parentName:"p"},"default")," sharedPreferencesName is: ",(0,o.kt)("strong",{parentName:"p"},"shared_preferences")," and keychainService is: ",(0,o.kt)("strong",{parentName:"p"},"app"),". To do so, just use ",(0,o.kt)("inlineCode",{parentName:"p"},"setItem")," like this: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"SInfo.setItem('key1', 'value1', {});\n")),(0,o.kt)("p",null,"If you used Android's getDefaultSharedPreferences in your project the shared preference's name that you are looking for is: ",(0,o.kt)("strong",{parentName:"p"},"com.mypackage.MyApp_preferences"),". On the other hand if you used iOS's Keychain the default service is: ",(0,o.kt)("strong",{parentName:"p"},"app"),"."))}d.isMDXComponent=!0}}]);