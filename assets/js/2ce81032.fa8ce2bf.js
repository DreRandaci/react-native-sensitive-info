(self.webpackChunkreact_native_sensitive_info=self.webpackChunkreact_native_sensitive_info||[]).push([[5633],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,v=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(v,o(o({ref:t},d),{},{components:n})):r.createElement(v,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4449:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=n(4034),a=n(9973),i=(n(7294),n(3905)),o=["components"],s={id:"overview",slug:"/",title:"Overview",sidebar_label:"Overview"},c=void 0,l={unversionedId:"overview",id:"version-6.x/overview",isDocsHomePage:!1,title:"Overview",description:"RNSInfo is an open-source library developed by many contributors since 2016. \u2764\ufe0f",source:"@site/versioned_docs/version-6.x/overview.md",sourceDirName:".",slug:"/",permalink:"/react-native-sensitive-info/docs/",editUrl:"https://github.com/mCodex/react-native-sensitive-info/tree/website/versioned_docs/version-6.x/overview.md",version:"6.x",lastUpdatedBy:"Mateus Andrade",lastUpdatedAt:1624916702,formattedLastUpdatedAt:"6/28/2021",frontMatter:{id:"overview",slug:"/",title:"Overview",sidebar_label:"Overview"},sidebar:"version-6.x/someSidebar",next:{title:"How it works",permalink:"/react-native-sensitive-info/docs/how_it_works"}},d=[{value:"v6.x",id:"v6x",children:[{value:"BREAKING CHANGES:",id:"breaking-changes",children:[]},{value:"More changes",id:"more-changes",children:[]}]},{value:"Demo",id:"demo",children:[]}],u={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"RNSInfo is an open-source library developed by many contributors since 2016. \u2764\ufe0f"),(0,i.kt)("p",null,"Securing sensitive data is very important in production-ready applications. So, this is why RNSInfo was created for, to help you focus in what matters most, your application. \ud83d\ude09"),(0,i.kt)("p",null,"Handling sensitive data couldn't be easier in React-Native apps."),(0,i.kt)("h2",{id:"v6x"},"v6.x"),(0,i.kt)("p",null,"Below you can find the new incoming features from v6.x"),(0,i.kt)("h3",{id:"breaking-changes"},"BREAKING CHANGES:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This version uses by default ",(0,i.kt)("strong",{parentName:"p"},"keystore to encrypt/decrypt data")," on Android. So, if you use the ",(0,i.kt)("strong",{parentName:"p"},"master branch")," or ",(0,i.kt)("strong",{parentName:"p"},"v5.x")," in your project you may not be able to retrieve previous saved data. We still need more work to handle this. The discussion can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mCodex/react-native-sensitive-info/issues/196"},"here"),". On the other hand, if you already use keystore branch you can give it a try.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The method ",(0,i.kt)("inlineCode",{parentName:"p"},"isHardwareDetected")," was removed due to ",(0,i.kt)("inlineCode",{parentName:"p"},"isSensorAvailable")))),(0,i.kt)("h3",{id:"more-changes"},"More changes"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Finally added keystore to encrypt/decrypt data before saving/retrieving in sharedPreferences \ud83c\udf89"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Migrating JS code to TS"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Added Android's Biometric Prompt for supported devices"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,i.kt)("strong",{parentName:"li"},"If you were using keystore's branch:")," Added many bug fixes and improvements which were available only in master's branch")),(0,i.kt)("h2",{id:"demo"},"Demo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import SInfo from "react-native-sensitive-info";\n\nconst savingFirstData = await SInfo.setItem("key1", "value1", {\n  sharedPreferencesName: "mySharedPrefs",\n  keychainService: "myKeychain",\n});\n\nconsole.log(savingFirstData); //value1\n\n// Need to retrieve later?\n\nconst gettingFirstData = await SInfo.getItem("key1", {\n  sharedPreferencesName: "mySharedPrefs",\n  keychainService: "myKeychain",\n});\n\nconsole.log(gettingFirstData); //value1\n\n//Need to get all values stored?\n\nconst gettingAllKeys = await SInfo.getAllItems({\n  sharedPreferencesName: "mySharedPrefs",\n  keychainService: "myKeychain",\n});\n\nconsole.log(gettingAllKeys); //value1\n')))}p.isMDXComponent=!0}}]);